# 아직 dfs가 익숙하지 않다. 더 공부할 것!
# D.P. 
# DFS

class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        max_length = 0
        row = len(matrix)
        col = len(matrix[0])

        memory = [[None]*col for i in range(row)]
        
        for i in range(row):
            for j in range(col):
                max_length = max(max_length, self.dfs(i, j, matrix, memory))
        return max_length
    
    def dfs(self, i, j, matrix, memory):
        if memory[i][j]:
            return memory[i][j]
        count = 0
        if i > 0 and matrix[i-1][j] > matrix[i][j]:
            count = max(count, self.dfs(i-1, j, matrix, memory))
        if j > 0 and matrix[i][j-1] > matrix[i][j]:
            count = max(count, self.dfs(i, j-1, matrix, memory))
        if i < len(matrix) - 1 and matrix[i+1][j] > matrix[i][j]:
            count = max(count, self.dfs(i+1, j, matrix, memory))
        if j < len(matrix[0]) - 1 and matrix[i][j+1] > matrix[i][j]:
            count = max(count, self.dfs(i, j+1, matrix, memory))    
        memory[i][j] = count + 1
        return count + 1
