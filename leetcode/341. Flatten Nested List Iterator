# """
# This is the interface that allows for creating nested lists.
# You should not implement it, or speculate about its implementation
# """
#class NestedInteger:
#    def isInteger(self) -> bool:
#        """
#        @return True if this NestedInteger holds a single integer, rather than a nested list.
#        """
#
#    def getInteger(self) -> int:
#        """
#        @return the single integer that this NestedInteger holds, if it holds a single integer
#        Return None if this NestedInteger holds a nested list
#        """
#
#    def getList(self) -> [NestedInteger]:
#        """
#        @return the nested list that this NestedInteger holds, if it holds a nested list
#        Return None if this NestedInteger holds a single integer
#        """

class NestedIterator:
    def __init__(self, nestedList: [NestedInteger]):
        # Initializes the iterator with the nested list nestedList
        self.queue = []
        self.flatten(nestedList)
    
    def flatten(self, nestedList: [NestedInteger]):
        for element in nestedList:
            if element.isInteger(): # element 있으면 그냥 가져오고
                self.queue.append(element.getInteger())
            else: # 이제 없으면 flatten
                self.flatten(element.getList())
    def next(self) -> int:
        # Returns the next integer in the nested list.
        return self.queue.pop(0)
    def hasNext(self) -> bool:
        # Returns true if there are still some integers in the nested list and false otherwise
        return len(self.queue) != 0
    
# Your NestedIterator object will be instantiated and called as such:
# i, v = NestedIterator(nestedList), []
# while i.hasNext(): v.append(i.next())
