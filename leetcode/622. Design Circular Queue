class MyCircularQueue:

    def __init__(self, k: int): # Initializes the object with the size of the queue to be k.
        self.mycircularqueue = [None] * (k + 1) # 0번에는 front와 rear이 처음 위치, 값이 들어가지 x
        self.len = k + 1
        self.front = 0
        self.rear = 0

    def enQueue(self, value: int) -> bool: # Inserts an element into the circular queue. 
                                           # Return true if the operation is successful.
        if self.isFull() : #queue full
            return False
        self.rear = (self.rear + 1) % self.len
        self.mycircularqueue[self.rear] = value
        return True

    def deQueue(self) -> bool: # Deletes an element from the circular queue. 
                               # Return true if the operation is successful.
        if self.isEmpty(): # queue empty
            return False        
        self.front = (self.front + 1) % self.len
        self.mycircularqueue[self.front] = [None]
        return True

    def Front(self) -> int: # Gets the front item from the queue. If the queue is empty, return -1
        if self.isEmpty(): return -1
        return self.mycircularqueue[self.front + 1]

    def Rear(self) -> int: # Gets the last item from the queue. If the queue is empty, return -1.
        if self.isEmpty(): return -1
        return self.mycircularqueue[self.rear]

    def isEmpty(self) -> bool: # Checks whether the circular queue is empty or not.
        return self.front == self.rear 
    def isFull(self) -> bool: # Checks whether the circular queue is full or not.
         return (self.rear + 1) % self.len == self.front


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
